// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/l2_v1/l2_v1.proto

package l2_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// L2V1Client is the client API for L2V1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type L2V1Client interface {
	MakeBlock(ctx context.Context, in *Mock, opts ...grpc.CallOption) (*Block, error)
}

type l2V1Client struct {
	cc grpc.ClientConnInterface
}

func NewL2V1Client(cc grpc.ClientConnInterface) L2V1Client {
	return &l2V1Client{cc}
}

func (c *l2V1Client) MakeBlock(ctx context.Context, in *Mock, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := c.cc.Invoke(ctx, "/l2_v1.L2V1/MakeBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// L2V1Server is the server API for L2V1 service.
// All implementations must embed UnimplementedL2V1Server
// for forward compatibility
type L2V1Server interface {
	MakeBlock(context.Context, *Mock) (*Block, error)
	mustEmbedUnimplementedL2V1Server()
}

// UnimplementedL2V1Server must be embedded to have forward compatible implementations.
type UnimplementedL2V1Server struct {
}

func (UnimplementedL2V1Server) MakeBlock(context.Context, *Mock) (*Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeBlock not implemented")
}
func (UnimplementedL2V1Server) mustEmbedUnimplementedL2V1Server() {}

// UnsafeL2V1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to L2V1Server will
// result in compilation errors.
type UnsafeL2V1Server interface {
	mustEmbedUnimplementedL2V1Server()
}

func RegisterL2V1Server(s grpc.ServiceRegistrar, srv L2V1Server) {
	s.RegisterService(&L2V1_ServiceDesc, srv)
}

func _L2V1_MakeBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(L2V1Server).MakeBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/l2_v1.L2V1/MakeBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(L2V1Server).MakeBlock(ctx, req.(*Mock))
	}
	return interceptor(ctx, in, info, handler)
}

// L2V1_ServiceDesc is the grpc.ServiceDesc for L2V1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var L2V1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "l2_v1.L2V1",
	HandlerType: (*L2V1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeBlock",
			Handler:    _L2V1_MakeBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/l2_v1/l2_v1.proto",
}
